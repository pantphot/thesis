// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file PointHeader_PubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "PointHeader_PubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

namespace nettools_msgs
{
    namespace msg
    {
        namespace dds_
        {
            PointHeader_PubSubType::PointHeader_PubSubType()
            {
                setName("nettools_msgs::msg::dds_::PointHeader_");
                m_typeSize = static_cast<uint32_t>(PointHeader_::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                m_isGetKeyDefined = PointHeader_::isKeyDefined();
                size_t keyLength = PointHeader_::getKeyMaxCdrSerializedSize()>16 ? PointHeader_::getKeyMaxCdrSerializedSize() : 16;
                m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                memset(m_keyBuffer, 0, keyLength);
            }

            PointHeader_PubSubType::~PointHeader_PubSubType()
            {
                if(m_keyBuffer!=nullptr)
                    free(m_keyBuffer);
            }

            bool PointHeader_PubSubType::serialize(void *data, SerializedPayload_t *payload)
            {
                PointHeader_ *p_type = static_cast<PointHeader_*>(data);
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                // Serialize encapsulation
                ser.serialize_encapsulation();

                try
                {
                    p_type->serialize(ser); // Serialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                return true;
            }

            bool PointHeader_PubSubType::deserialize(SerializedPayload_t* payload, void* data)
            {
                PointHeader_* p_type = static_cast<PointHeader_*>(data); //Convert DATA to pointer of your type
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                try
                {
                    p_type->deserialize(deser); //Deserialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                return true;
            }

            std::function<uint32_t()> PointHeader_PubSubType::getSerializedSizeProvider(void* data)
            {
                return [data]() -> uint32_t
                {
                    return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<PointHeader_*>(data))) + 4 /*encapsulation*/;
                };
            }

            void* PointHeader_PubSubType::createData()
            {
                return reinterpret_cast<void*>(new PointHeader_());
            }

            void PointHeader_PubSubType::deleteData(void* data)
            {
                delete(reinterpret_cast<PointHeader_*>(data));
            }

            bool PointHeader_PubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
            {
                if(!m_isGetKeyDefined)
                    return false;
                PointHeader_* p_type = static_cast<PointHeader_*>(data);
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),PointHeader_::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                p_type->serializeKey(ser);
                if(force_md5 || PointHeader_::getKeyMaxCdrSerializedSize()>16)    {
                    m_md5.init();
                    m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                    m_md5.finalize();
                    for(uint8_t i = 0;i<16;++i)        {
                        handle->value[i] = m_md5.digest[i];
                    }
                }
                else    {
                    for(uint8_t i = 0;i<16;++i)        {
                        handle->value[i] = m_keyBuffer[i];
                    }
                }
                return true;
            }


        } //End of namespace dds_

    } //End of namespace msg

} //End of namespace nettools_msgs
