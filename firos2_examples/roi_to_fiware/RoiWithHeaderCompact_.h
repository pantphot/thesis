// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RoiWithHeaderCompact_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _NETTOOLS_MSGS_MSG_DDS__ROIWITHHEADERCOMPACT__H_
#define _NETTOOLS_MSGS_MSG_DDS__ROIWITHHEADERCOMPACT__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RoiWithHeaderCompact__SOURCE)
#define RoiWithHeaderCompact__DllAPI __declspec( dllexport )
#else
#define RoiWithHeaderCompact__DllAPI __declspec( dllimport )
#endif // RoiWithHeaderCompact__SOURCE
#else
#define RoiWithHeaderCompact__DllAPI
#endif
#else
#define RoiWithHeaderCompact__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace nettools_msgs
{
    namespace msg
    {
        namespace dds_
        {
            /*!
             * @brief This class represents the structure RoiWithHeaderCompact_ defined by the user in the IDL file.
             * @ingroup ROIWITHHEADERCOMPACT_
             */
            class RoiWithHeaderCompact_
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport RoiWithHeaderCompact_();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~RoiWithHeaderCompact_();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object nettools_msgs::msg::dds_::RoiWithHeaderCompact_ that will be copied.
                 */
                eProsima_user_DllExport RoiWithHeaderCompact_(const RoiWithHeaderCompact_ &x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object nettools_msgs::msg::dds_::RoiWithHeaderCompact_ that will be copied.
                 */
                eProsima_user_DllExport RoiWithHeaderCompact_(RoiWithHeaderCompact_ &&x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object nettools_msgs::msg::dds_::RoiWithHeaderCompact_ that will be copied.
                 */
                eProsima_user_DllExport RoiWithHeaderCompact_& operator=(const RoiWithHeaderCompact_ &x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object nettools_msgs::msg::dds_::RoiWithHeaderCompact_ that will be copied.
                 */
                eProsima_user_DllExport RoiWithHeaderCompact_& operator=(RoiWithHeaderCompact_ &&x);

                /*!
                 * @brief This function sets a value in member sec_
                 * @param _sec_ New value for member sec_
                 */
                inline eProsima_user_DllExport void sec_(int32_t _sec_)
                {
                    m_sec_ = _sec_;
                }

                /*!
                 * @brief This function returns the value of member sec_
                 * @return Value of member sec_
                 */
                inline eProsima_user_DllExport int32_t sec_() const
                {
                    return m_sec_;
                }

                /*!
                 * @brief This function returns a reference to member sec_
                 * @return Reference to member sec_
                 */
                inline eProsima_user_DllExport int32_t& sec_()
                {
                    return m_sec_;
                }
                /*!
                 * @brief This function sets a value in member nanosec_
                 * @param _nanosec_ New value for member nanosec_
                 */
                inline eProsima_user_DllExport void nanosec_(uint32_t _nanosec_)
                {
                    m_nanosec_ = _nanosec_;
                }

                /*!
                 * @brief This function returns the value of member nanosec_
                 * @return Value of member nanosec_
                 */
                inline eProsima_user_DllExport uint32_t nanosec_() const
                {
                    return m_nanosec_;
                }

                /*!
                 * @brief This function returns a reference to member nanosec_
                 * @return Reference to member nanosec_
                 */
                inline eProsima_user_DllExport uint32_t& nanosec_()
                {
                    return m_nanosec_;
                }
                /*!
                 * @brief This function copies the value in member frame_id_
                 * @param _frame_id_ New value to be copied in member frame_id_
                 */
                inline eProsima_user_DllExport void frame_id_(const std::string &_frame_id_)
                {
                    m_frame_id_ = _frame_id_;
                }

                /*!
                 * @brief This function moves the value in member frame_id_
                 * @param _frame_id_ New value to be moved in member frame_id_
                 */
                inline eProsima_user_DllExport void frame_id_(std::string &&_frame_id_)
                {
                    m_frame_id_ = std::move(_frame_id_);
                }

                /*!
                 * @brief This function returns a constant reference to member frame_id_
                 * @return Constant reference to member frame_id_
                 */
                inline eProsima_user_DllExport const std::string& frame_id_() const
                {
                    return m_frame_id_;
                }

                /*!
                 * @brief This function returns a reference to member frame_id_
                 * @return Reference to member frame_id_
                 */
                inline eProsima_user_DllExport std::string& frame_id_()
                {
                    return m_frame_id_;
                }
                /*!
                 * @brief This function sets a value in member x_offset_
                 * @param _x_offset_ New value for member x_offset_
                 */
                inline eProsima_user_DllExport void x_offset_(uint32_t _x_offset_)
                {
                    m_x_offset_ = _x_offset_;
                }

                /*!
                 * @brief This function returns the value of member x_offset_
                 * @return Value of member x_offset_
                 */
                inline eProsima_user_DllExport uint32_t x_offset_() const
                {
                    return m_x_offset_;
                }

                /*!
                 * @brief This function returns a reference to member x_offset_
                 * @return Reference to member x_offset_
                 */
                inline eProsima_user_DllExport uint32_t& x_offset_()
                {
                    return m_x_offset_;
                }
                /*!
                 * @brief This function sets a value in member y_offset_
                 * @param _y_offset_ New value for member y_offset_
                 */
                inline eProsima_user_DllExport void y_offset_(uint32_t _y_offset_)
                {
                    m_y_offset_ = _y_offset_;
                }

                /*!
                 * @brief This function returns the value of member y_offset_
                 * @return Value of member y_offset_
                 */
                inline eProsima_user_DllExport uint32_t y_offset_() const
                {
                    return m_y_offset_;
                }

                /*!
                 * @brief This function returns a reference to member y_offset_
                 * @return Reference to member y_offset_
                 */
                inline eProsima_user_DllExport uint32_t& y_offset_()
                {
                    return m_y_offset_;
                }
                /*!
                 * @brief This function sets a value in member height_
                 * @param _height_ New value for member height_
                 */
                inline eProsima_user_DllExport void height_(uint32_t _height_)
                {
                    m_height_ = _height_;
                }

                /*!
                 * @brief This function returns the value of member height_
                 * @return Value of member height_
                 */
                inline eProsima_user_DllExport uint32_t height_() const
                {
                    return m_height_;
                }

                /*!
                 * @brief This function returns a reference to member height_
                 * @return Reference to member height_
                 */
                inline eProsima_user_DllExport uint32_t& height_()
                {
                    return m_height_;
                }
                /*!
                 * @brief This function sets a value in member width_
                 * @param _width_ New value for member width_
                 */
                inline eProsima_user_DllExport void width_(uint32_t _width_)
                {
                    m_width_ = _width_;
                }

                /*!
                 * @brief This function returns the value of member width_
                 * @return Value of member width_
                 */
                inline eProsima_user_DllExport uint32_t width_() const
                {
                    return m_width_;
                }

                /*!
                 * @brief This function returns a reference to member width_
                 * @return Reference to member width_
                 */
                inline eProsima_user_DllExport uint32_t& width_()
                {
                    return m_width_;
                }
                /*!
                 * @brief This function sets a value in member do_rectify_
                 * @param _do_rectify_ New value for member do_rectify_
                 */
                inline eProsima_user_DllExport void do_rectify_(bool _do_rectify_)
                {
                    m_do_rectify_ = _do_rectify_;
                }

                /*!
                 * @brief This function returns the value of member do_rectify_
                 * @return Value of member do_rectify_
                 */
                inline eProsima_user_DllExport bool do_rectify_() const
                {
                    return m_do_rectify_;
                }

                /*!
                 * @brief This function returns a reference to member do_rectify_
                 * @return Reference to member do_rectify_
                 */
                inline eProsima_user_DllExport bool& do_rectify_()
                {
                    return m_do_rectify_;
                }
                /*!
                 * @brief This function sets a value in member image_width_
                 * @param _image_width_ New value for member image_width_
                 */
                inline eProsima_user_DllExport void image_width_(uint32_t _image_width_)
                {
                    m_image_width_ = _image_width_;
                }

                /*!
                 * @brief This function returns the value of member image_width_
                 * @return Value of member image_width_
                 */
                inline eProsima_user_DllExport uint32_t image_width_() const
                {
                    return m_image_width_;
                }

                /*!
                 * @brief This function returns a reference to member image_width_
                 * @return Reference to member image_width_
                 */
                inline eProsima_user_DllExport uint32_t& image_width_()
                {
                    return m_image_width_;
                }
                /*!
                 * @brief This function sets a value in member image_height_
                 * @param _image_height_ New value for member image_height_
                 */
                inline eProsima_user_DllExport void image_height_(uint32_t _image_height_)
                {
                    m_image_height_ = _image_height_;
                }

                /*!
                 * @brief This function returns the value of member image_height_
                 * @return Value of member image_height_
                 */
                inline eProsima_user_DllExport uint32_t image_height_() const
                {
                    return m_image_height_;
                }

                /*!
                 * @brief This function returns a reference to member image_height_
                 * @return Reference to member image_height_
                 */
                inline eProsima_user_DllExport uint32_t& image_height_()
                {
                    return m_image_height_;
                }

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const nettools_msgs::msg::dds_::RoiWithHeaderCompact_& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

            private:
                int32_t m_sec_;
                uint32_t m_nanosec_;
                std::string m_frame_id_;
                uint32_t m_x_offset_;
                uint32_t m_y_offset_;
                uint32_t m_height_;
                uint32_t m_width_;
                bool m_do_rectify_;
                uint32_t m_image_width_;
                uint32_t m_image_height_;
            };
        }
    }
}

#endif // _NETTOOLS_MSGS_MSG_DDS__ROIWITHHEADERCOMPACT__H_