// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RoiWithHeaderCompact_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "RoiWithHeaderCompact_.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

nettools_msgs::msg::dds_::RoiWithHeaderCompact_::RoiWithHeaderCompact_()
{
    m_sec_ = 0;

    m_nanosec_ = 0;


    m_x_offset_ = 0;

    m_y_offset_ = 0;

    m_height_ = 0;

    m_width_ = 0;

    m_do_rectify_ = false;

    m_image_width_ = 0;

    m_image_height_ = 0;


}

nettools_msgs::msg::dds_::RoiWithHeaderCompact_::~RoiWithHeaderCompact_()
{
}

nettools_msgs::msg::dds_::RoiWithHeaderCompact_::RoiWithHeaderCompact_(const RoiWithHeaderCompact_ &x)
{
    m_sec_ = x.m_sec_;
    m_nanosec_ = x.m_nanosec_;
    m_frame_id_ = x.m_frame_id_;
    m_x_offset_ = x.m_x_offset_;
    m_y_offset_ = x.m_y_offset_;
    m_height_ = x.m_height_;
    m_width_ = x.m_width_;
    m_do_rectify_ = x.m_do_rectify_;
    m_image_width_ = x.m_image_width_;
    m_image_height_ = x.m_image_height_;
}

nettools_msgs::msg::dds_::RoiWithHeaderCompact_::RoiWithHeaderCompact_(RoiWithHeaderCompact_ &&x)
{
    m_sec_ = x.m_sec_;
    m_nanosec_ = x.m_nanosec_;
    m_frame_id_ = std::move(x.m_frame_id_);
    m_x_offset_ = x.m_x_offset_;
    m_y_offset_ = x.m_y_offset_;
    m_height_ = x.m_height_;
    m_width_ = x.m_width_;
    m_do_rectify_ = x.m_do_rectify_;
    m_image_width_ = x.m_image_width_;
    m_image_height_ = x.m_image_height_;
}

nettools_msgs::msg::dds_::RoiWithHeaderCompact_& nettools_msgs::msg::dds_::RoiWithHeaderCompact_::operator=(const RoiWithHeaderCompact_ &x)
{
    m_sec_ = x.m_sec_;
    m_nanosec_ = x.m_nanosec_;
    m_frame_id_ = x.m_frame_id_;
    m_x_offset_ = x.m_x_offset_;
    m_y_offset_ = x.m_y_offset_;
    m_height_ = x.m_height_;
    m_width_ = x.m_width_;
    m_do_rectify_ = x.m_do_rectify_;
    m_image_width_ = x.m_image_width_;
    m_image_height_ = x.m_image_height_;

    return *this;
}

nettools_msgs::msg::dds_::RoiWithHeaderCompact_& nettools_msgs::msg::dds_::RoiWithHeaderCompact_::operator=(RoiWithHeaderCompact_ &&x)
{
    m_sec_ = x.m_sec_;
    m_nanosec_ = x.m_nanosec_;
    m_frame_id_ = std::move(x.m_frame_id_);
    m_x_offset_ = x.m_x_offset_;
    m_y_offset_ = x.m_y_offset_;
    m_height_ = x.m_height_;
    m_width_ = x.m_width_;
    m_do_rectify_ = x.m_do_rectify_;
    m_image_width_ = x.m_image_width_;
    m_image_height_ = x.m_image_height_;

    return *this;
}

size_t nettools_msgs::msg::dds_::RoiWithHeaderCompact_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t nettools_msgs::msg::dds_::RoiWithHeaderCompact_::getCdrSerializedSize(const nettools_msgs::msg::dds_::RoiWithHeaderCompact_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id_().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void nettools_msgs::msg::dds_::RoiWithHeaderCompact_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_sec_;
    scdr << m_nanosec_;
    scdr << m_frame_id_;
    scdr << m_x_offset_;
    scdr << m_y_offset_;
    scdr << m_height_;
    scdr << m_width_;
    scdr << m_do_rectify_;
    scdr << m_image_width_;
    scdr << m_image_height_;
}

void nettools_msgs::msg::dds_::RoiWithHeaderCompact_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_sec_;
    dcdr >> m_nanosec_;
    dcdr >> m_frame_id_;
    dcdr >> m_x_offset_;
    dcdr >> m_y_offset_;
    dcdr >> m_height_;
    dcdr >> m_width_;
    dcdr >> m_do_rectify_;
    dcdr >> m_image_width_;
    dcdr >> m_image_height_;
}

size_t nettools_msgs::msg::dds_::RoiWithHeaderCompact_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            











    return current_align;
}

bool nettools_msgs::msg::dds_::RoiWithHeaderCompact_::isKeyDefined()
{
    return false;
}

void nettools_msgs::msg::dds_::RoiWithHeaderCompact_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}


